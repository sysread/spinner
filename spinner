#!/usr/bin/env bash

set -eu -o pipefail

# ------------------------------------------------------------------------------
# Global variables
# ------------------------------------------------------------------------------
msg="Working"
cmd=""

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------
function usage() {
  local exit_code="${1:-0}"

  cat <<EOL
usage: spinner [OPTIONS] [-- command]

Options:
  --help      | -h    show help information
  --msg       | -m    message to display while waiting
EOL

  exit "$exit_code"
}

spinner() {
  local spinstr="|/-\\"
  local color_codes=(31 32 33 34 35 36 37 93)
  local color_idx=0

  while :; do
    for i in $(seq 0 3); do
      local color_code=${color_codes[$((color_idx % 8))]}
      printf >&2 "\r\033[${color_code}m%s \033[92m%s\033[0m" "${spinstr:$i:1}" "$msg"
      color_idx=$((color_idx + 1))
      sleep 0.25
    done
  done
}

# ------------------------------------------------------------------------------
# Process arguments
# ------------------------------------------------------------------------------
while (("$#")); do
  case "$1" in
    --help | -h)
      usage 0
      ;;

    --msg | -m)
      msg="$2"
      shift 2
      ;;

    --)
      shift
      cmd="$*"
      break
      ;;

    *) ;;
  esac
done

# ------------------------------------------------------------------------------
# Validate arguments
# ------------------------------------------------------------------------------
if [ -z "$cmd" ]; then
  echo >&2 "No command provided. Use -- to specify the command."
  usage 1
fi

# ------------------------------------------------------------------------------
# Main
# ------------------------------------------------------------------------------
# Create a temporary file to store command output
tmpfile=$(mktemp)

# Start the spinner in the background
spinner &
spinner_pid=$!
trap 'kill -9 $spinner_pid 2>/dev/null || true; rm -f "$tmpfile"' EXIT

# Capture the input and write to the temp file, suppress stdout
if [ -n "$cmd" ]; then
  eval "$cmd" >"$tmpfile"
  cmd_exit_code=$?
else
  tee "$tmpfile" >/dev/null
  cmd_exit_code=${PIPESTATUS[0]}
fi

# Stop the spinner
kill -9 $spinner_pid
wait $spinner_pid 2>/dev/null || true

# Clear spinner line
echo -ne "\r\033[K" >&2

# Unset the trap and remove the temp file
trap - EXIT

# Output the collected output
cat "$tmpfile"
rm -f "$tmpfile"

if [ "$cmd_exit_code" -ne 0 ]; then
  echo >&2 "Command failed with exit code $cmd_exit_code."
  exit "$cmd_exit_code"
fi
